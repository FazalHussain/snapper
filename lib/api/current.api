// Signature format: 4.0
package dev.chrisbanes.snapper {

  @kotlin.RequiresOptIn(message="Snapper is experimental. The API may be changed in the future.") @kotlin.annotation.Retention(kotlin.annotation.AnnotationRetention) public @interface ExperimentalSnapperApi {
  }

  public final class LazyListKt {
    method @androidx.compose.runtime.Composable @dev.chrisbanes.snapper.ExperimentalSnapperApi public static dev.chrisbanes.snapper.LazyListSnapperLayoutInfo rememberLazyListSnapperLayoutInfo(androidx.compose.foundation.lazy.LazyListState lazyListState, optional kotlin.jvm.functions.Function2<? super dev.chrisbanes.snapper.SnapperLayoutInfo,? super java.lang.Integer,java.lang.Integer> snapOffsetForItem, optional @Px int endContentPadding);
  }

  @dev.chrisbanes.snapper.ExperimentalSnapperApi public final class LazyListSnapperLayoutInfo extends dev.chrisbanes.snapper.SnapperLayoutInfo {
    ctor public LazyListSnapperLayoutInfo(androidx.compose.foundation.lazy.LazyListState lazyListState, int endContentPadding, kotlin.jvm.functions.Function2<? super dev.chrisbanes.snapper.SnapperLayoutInfo,? super java.lang.Integer,java.lang.Integer> snapOffsetForItem);
    method public int determineTargetIndexForDecay(int currentIndex, float velocity, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, float maximumFlingDistance);
    method public int determineTargetIndexForSpring(int currentIndex, float velocity);
    method public int distanceToCurrentItemSnap();
    method public int distanceToNextItemSnap();
    method public int getCurrentItemIndex();
    method public int getEndOffset();
    method public kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> getSnapOffsetForItem();
    method public int getStartOffset();
    method public boolean isAtScrollEnd();
    method public boolean isAtScrollStart();
    method public int itemOffset(int index);
    method public int itemSize(int index);
    property public int currentItemIndex;
    property public int endOffset;
    property public kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> snapOffsetForItem;
    property public int startOffset;
  }

  @dev.chrisbanes.snapper.ExperimentalSnapperApi public final class SnapOffsets {
    method public kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> getCenter();
    method public kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> getEnd();
    method public kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> getStart();
    property public final kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> Center;
    property public final kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> End;
    property public final kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> Start;
    field public static final dev.chrisbanes.snapper.SnapOffsets INSTANCE;
  }

  @dev.chrisbanes.snapper.ExperimentalSnapperApi public final class SnapperFlingBehavior implements androidx.compose.foundation.gestures.FlingBehavior {
    ctor public SnapperFlingBehavior(dev.chrisbanes.snapper.SnapperLayoutInfo layoutInfo, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> springAnimationSpec, optional kotlin.jvm.functions.Function1<? super dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Float> maximumFlingDistance);
    method public Integer? getAnimationTarget();
    method public suspend Object? performFling(androidx.compose.foundation.gestures.ScrollScope, float initialVelocity, kotlin.coroutines.Continuation<? super java.lang.Float> p);
    property public final Integer? animationTarget;
  }

  @dev.chrisbanes.snapper.ExperimentalSnapperApi public final class SnapperFlingBehaviorDefaults {
    method public kotlin.jvm.functions.Function1<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Float> getMaximumFlingDistance();
    method public androidx.compose.animation.core.AnimationSpec<java.lang.Float> getSpringAnimationSpec();
    property public final kotlin.jvm.functions.Function1<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Float> MaximumFlingDistance;
    property public final androidx.compose.animation.core.AnimationSpec<java.lang.Float> SpringAnimationSpec;
    field public static final dev.chrisbanes.snapper.SnapperFlingBehaviorDefaults INSTANCE;
  }

  public final class SnapperFlingBehaviorKt {
    method @androidx.compose.runtime.Composable @dev.chrisbanes.snapper.ExperimentalSnapperApi public static dev.chrisbanes.snapper.SnapperFlingBehavior rememberSnapperFlingBehavior(dev.chrisbanes.snapper.SnapperLayoutInfo layoutInfo, optional androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, optional androidx.compose.animation.core.AnimationSpec<java.lang.Float> springAnimationSpec, optional kotlin.jvm.functions.Function1<? super dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Float> maximumFlingDistance);
  }

  @dev.chrisbanes.snapper.ExperimentalSnapperApi public abstract class SnapperLayoutInfo {
    ctor public SnapperLayoutInfo();
    method public abstract int determineTargetIndexForDecay(int currentIndex, float velocity, androidx.compose.animation.core.DecayAnimationSpec<java.lang.Float> decayAnimationSpec, float maximumFlingDistance);
    method public abstract int determineTargetIndexForSpring(int currentIndex, float velocity);
    method public abstract int distanceToCurrentItemSnap();
    method public abstract int distanceToNextItemSnap();
    method public abstract int getCurrentItemIndex();
    method public abstract int getEndOffset();
    method public abstract kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> getSnapOffsetForItem();
    method public abstract int getStartOffset();
    method public abstract boolean isAtScrollEnd();
    method public abstract boolean isAtScrollStart();
    method public abstract int itemOffset(int index);
    method public abstract int itemSize(int index);
    property public abstract int currentItemIndex;
    property public abstract int endOffset;
    property public abstract kotlin.jvm.functions.Function2<dev.chrisbanes.snapper.SnapperLayoutInfo,java.lang.Integer,java.lang.Integer> snapOffsetForItem;
    property public abstract int startOffset;
  }

}

